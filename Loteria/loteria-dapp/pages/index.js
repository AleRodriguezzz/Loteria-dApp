import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Header from './components/header'
import Footer from './components/footer'
import web3 from 'web3'
import { useState, useEffect} from 'react'
import localContract from '../blockchain/loteria'


export default function Home() {

  const [web3, setWeb3] = useState()
  const [cuentas, setCuentas] = useState()
  const [localContract, setLocalContract] = useState()
  const [bote, setBote] = useState()
  const [jugadores, setJugadores] = useState([])
  const [historialLoteria, setHistorialLoteria] = useState([])
  const [loteriaId, setLoteriaId] = useState()

  useEffect(() => {
    actualizarEstado()
  }, [localContract])

  const actualizarEstado = () => {
    if(localContract) getBote()
    if(localContract) getJugadores()
    if(localContract) getLoteriaId()
  }

  const getBote = async () => {
    const bote = await localContract.methods.getBalance().call()
    setBote(web3.utils.fromWei(bote, 'ether'))
  } 
  const getJugadores = async () => {
    const jugadores = await localContract.methods.getPlayers().call()
    setJugadores(jugadores)
  }
  const getHistorial = async (id) => {
    for (let i = parseInt(id); i > 0; i--){
      const addressGanador = await localContract.methods.lotteryHistory(i).call()
      const historialObjeto = {}
      historialObjeto.id = i
      historialObjeto.address = addressGanador
      setHistorialLoteria(historialLoteria => [...historialLoteria, historialObjeto])
    }
  }
  const getLoteriaId = async () => {
    const loteriaId = await localContract.methods.lotteryId().call()
    setLoteriaId(loteriaId)
    await getHistorial(loteriaId)
  }
  const comprarBilleteHandler = async () =>{
    try{
      await localContract.methods.enter().send({
        from: cuentas,
        value: '15000000000000000',
        gas: 300000,
        gasPrice: null
      })
      actualizarEstado()
    }catch(err) {
      console.log(err.message)
    }
  }
  const elegirGanadorHandler = async () => {
    try{
      await localContract.methods.pickWinner().send({
        from: cuentas,
        gas: 300000,
        gasPrice: null
      })
    }catch(err) {
      console.log(err.message)
    }
  }
  const pagarGanadorHandler = async () => {
    try{
      await localContract.methods.payWinner().send({
        from: cuentas,
        gas: 300000,
        gasPrice: null
      })
      const addressGanador = await localContract.methods.lotteryHistory(loteriaId).call()
      actualizarEstado()
    } catch(err) {
    }
  }
  return (
    <div>
      <Head>
        <title>Lotthereum</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header cuentas={cuentas} setWeb3={setWeb3} setCuentas={setCuentas} setLocalContract={setLocalContract}/>
      <main className={styles.main}>
        <section className={styles.content}>
          <section className={styles.botonessm}>
            <section className={styles.btn1}>
              <p>Compra un boleto por 0.015 Ether</p>
              <button onClick={comprarBilleteHandler}>Jugar</button>
            </section>
            <section className={styles.btn2}>
              <p>Admin Only: Selecciona un ganador</p>
              <button onClick={elegirGanadorHandler}>Elegir Ganador</button>
            </section>
            <section className={styles.btn3}>
              <p>Admin Only: Pagar al ganador</p>
              <button onClick={pagarGanadorHandler}>Pagar</button>
            </section>
          </section>
          <section className={styles.infosm}>
            <section className={styles.infolotto}>
                <h4>Historial de loterias</h4>
              {
                (historialLoteria && historialLoteria.length > 0) && historialLoteria.map(item =>{
                  if(loteriaId != item.id)
                    return <section key={item.id}>
                      <p>Ganador #{item.id}</p>
                      <p>{item.address}</p>
                    </section>
                })
              }
            </section>
            <section className={styles.infoplayers}>
              <div>
                <h4>Jugadores ({jugadores.length})</h4>
              </div>
              <section>
                <ul>
                  {
                    (jugadores && jugadores.length > 0) && jugadores.map((jugador, index) => {
                     return <li key={`${jugador}-${index}`}>
                        <p>{jugador}</p>
                      </li>
                    })
                  }
                </ul>
              </section>
            </section>
            <section className={styles.infobote}>
              <div>
                <h4>Bote</h4>
              </div>
              <section>
                <p>{bote} </p>
              </section>
            </section>
          </section>
        </section>
      </main>
      <Footer/>
    </div>
  )
}
